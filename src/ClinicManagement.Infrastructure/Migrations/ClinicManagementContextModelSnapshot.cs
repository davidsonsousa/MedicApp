// <auto-generated />
using System;
using ClinicManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicManagementContext))]
    partial class ClinicManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(21);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(11);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClinicId = 1L,
                            IsDeleted = false,
                            Name = "WMC - Prague 1",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2L,
                            ClinicId = 1L,
                            IsDeleted = false,
                            Name = "WMC - Prague 3",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3L,
                            ClinicId = 2L,
                            IsDeleted = false,
                            Name = "RC - Prague 5",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4L,
                            ClinicId = 2L,
                            IsDeleted = false,
                            Name = "RC - Prague 9",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Whatever Medical Center",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "Random Clinic",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchId = 1L,
                            IsDeleted = false,
                            Name = "General practitioner",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2L,
                            BranchId = 1L,
                            IsDeleted = false,
                            Name = "Urology",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3L,
                            BranchId = 1L,
                            IsDeleted = false,
                            Name = "Paediatrics",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4L,
                            BranchId = 2L,
                            IsDeleted = false,
                            Name = "Internal medicine",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 5L,
                            BranchId = 2L,
                            IsDeleted = false,
                            Name = "Cardiology",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 6L,
                            BranchId = 2L,
                            IsDeleted = false,
                            Name = "Ophthalmology",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.DepartmentEmployee", b =>
                {
                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentEmployee");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1L,
                            EmployeeId = 1L
                        },
                        new
                        {
                            DepartmentId = 2L,
                            EmployeeId = 2L
                        },
                        new
                        {
                            DepartmentId = 1L,
                            EmployeeId = 3L
                        },
                        new
                        {
                            DepartmentId = 2L,
                            EmployeeId = 4L
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(21);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "CZ",
                            IsDeleted = false,
                            Name = "Czech",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2L,
                            Code = "EN",
                            IsDeleted = false,
                            Name = "English",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3L,
                            Code = "PL",
                            IsDeleted = false,
                            Name = "Polish",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4L,
                            Code = "RU",
                            IsDeleted = false,
                            Name = "Russian",
                            VanityId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.LanguagePerson", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("LanguageId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("LanguagePerson");

                    b.HasData(
                        new
                        {
                            LanguageId = 1L,
                            PersonId = 1L
                        },
                        new
                        {
                            LanguageId = 2L,
                            PersonId = 1L
                        },
                        new
                        {
                            LanguageId = 1L,
                            PersonId = 2L
                        },
                        new
                        {
                            LanguageId = 2L,
                            PersonId = 2L
                        },
                        new
                        {
                            LanguageId = 1L,
                            PersonId = 3L
                        },
                        new
                        {
                            LanguageId = 4L,
                            PersonId = 3L
                        },
                        new
                        {
                            LanguageId = 1L,
                            PersonId = 4L
                        },
                        new
                        {
                            LanguageId = 3L,
                            PersonId = 4L
                        },
                        new
                        {
                            LanguageId = 2L,
                            PersonId = 5L
                        },
                        new
                        {
                            LanguageId = 2L,
                            PersonId = 6L
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(22);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(21);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("People", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.WorkSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96)
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(97)
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(12);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(11);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(99);

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Employee", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Person");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Patient", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Person");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 5L,
                            DateOfBirth = new DateTime(1981, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Bob",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfBirth = new DateTime(1986, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Karen",
                            Surname = "Horner"
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Doctor", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Employee");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfBirth = new DateTime(1970, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfBirth = new DateTime(1975, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mary",
                            Surname = "Sue"
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Nurse", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Employee");

                    b.HasDiscriminator().HasValue("Nurse");

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            DateOfBirth = new DateTime(1980, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Pavla",
                            Surname = "Novakova"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfBirth = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Lenka",
                            Surname = "Novakova"
                        });
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Patient", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.DateTimeRange", "DateTimeSchedule", b1 =>
                        {
                            b1.Property<long>("AppointmentId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2")
                                .HasColumnOrder(51);

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnOrder(50);

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("DateTimeSchedule")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Clinic", "Clinic")
                        .WithMany("Branches")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<long>("BranchId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(31);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(33);

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(32);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(30);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(34);

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");

                            b1.HasData(
                                new
                                {
                                    BranchId = 1L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Ulicova 1011/10",
                                    ZipCode = "110 00"
                                },
                                new
                                {
                                    BranchId = 2L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Ulicova 3033/30",
                                    ZipCode = "330 00"
                                },
                                new
                                {
                                    BranchId = 3L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Ulicova 5055/50",
                                    ZipCode = "550 00"
                                },
                                new
                                {
                                    BranchId = 4L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Ulicova 9000/90",
                                    ZipCode = "990 00"
                                });
                        });

                    b.OwnsOne("MedicApp.SharedKernel.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("BranchId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(40);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(41);

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");

                            b1.HasData(
                                new
                                {
                                    BranchId = 1L,
                                    CountryCode = "420",
                                    Number = "999888777"
                                },
                                new
                                {
                                    BranchId = 2L,
                                    CountryCode = "420",
                                    Number = "666555444"
                                },
                                new
                                {
                                    BranchId = 3L,
                                    CountryCode = "420",
                                    Number = "333222111"
                                },
                                new
                                {
                                    BranchId = 4L,
                                    CountryCode = "420",
                                    Number = "999666333"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Department", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Branch", "Branch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("DepartmentId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(40);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(41);

                            b1.HasKey("DepartmentId");

                            b1.ToTable("Departments");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");

                            b1.HasData(
                                new
                                {
                                    DepartmentId = 1L,
                                    CountryCode = "420",
                                    Number = "999888777"
                                },
                                new
                                {
                                    DepartmentId = 2L,
                                    CountryCode = "420",
                                    Number = "666555444"
                                },
                                new
                                {
                                    DepartmentId = 3L,
                                    CountryCode = "420",
                                    Number = "333222111"
                                },
                                new
                                {
                                    DepartmentId = 4L,
                                    CountryCode = "420",
                                    Number = "999666333"
                                },
                                new
                                {
                                    DepartmentId = 5L,
                                    CountryCode = "420",
                                    Number = "888555222"
                                },
                                new
                                {
                                    DepartmentId = 6L,
                                    CountryCode = "420",
                                    Number = "777444111"
                                });
                        });

                    b.Navigation("Branch");

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.DepartmentEmployee", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.LanguagePerson", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Person", b =>
                {
                    b.OwnsOne("MedicApp.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(31);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(33);

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(32);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(30);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(34);

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.HasData(
                                new
                                {
                                    PersonId = 1L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Doktorova 1010/10",
                                    ZipCode = "110 00"
                                },
                                new
                                {
                                    PersonId = 2L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Nemocinice 2020/20",
                                    ZipCode = "220 00"
                                },
                                new
                                {
                                    PersonId = 3L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Sersterska 3030/30",
                                    ZipCode = "330 00"
                                },
                                new
                                {
                                    PersonId = 4L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Sersterska 3031/31",
                                    ZipCode = "330 00"
                                },
                                new
                                {
                                    PersonId = 5L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Pacientu 4000/40",
                                    ZipCode = "440 00"
                                },
                                new
                                {
                                    PersonId = 6L,
                                    City = "Prague",
                                    Country = "CZ",
                                    Street = "ul. Pacientu 4444/44",
                                    ZipCode = "440 00"
                                });
                        });

                    b.OwnsOne("MedicApp.SharedKernel.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(40);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnOrder(41);

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.HasData(
                                new
                                {
                                    PersonId = 1L,
                                    CountryCode = "420",
                                    Number = "987654321"
                                },
                                new
                                {
                                    PersonId = 2L,
                                    CountryCode = "420",
                                    Number = "789456123"
                                },
                                new
                                {
                                    PersonId = 3L,
                                    CountryCode = "420",
                                    Number = "777888999"
                                },
                                new
                                {
                                    PersonId = 4L,
                                    CountryCode = "420",
                                    Number = "888444333"
                                },
                                new
                                {
                                    PersonId = 5L,
                                    CountryCode = "420",
                                    Number = "654321789"
                                },
                                new
                                {
                                    PersonId = 6L,
                                    CountryCode = "420",
                                    Number = "321456987"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.WorkSchedule", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Employee", null)
                        .WithMany("WorkSchedules")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.DateTimeRange", "DateTimeSchedule", b1 =>
                        {
                            b1.Property<long>("WorkScheduleId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2")
                                .HasColumnOrder(51);

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnOrder(50);

                            b1.HasKey("WorkScheduleId");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleId");
                        });

                    b.Navigation("DateTimeSchedule")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Clinic", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Employee", b =>
                {
                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
