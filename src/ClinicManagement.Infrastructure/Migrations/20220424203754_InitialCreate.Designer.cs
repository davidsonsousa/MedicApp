// <auto-generated />
using System;
using ClinicManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicManagementContext))]
    [Migration("20220424203754_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppointmentPatient", b =>
                {
                    b.Property<long>("AppointmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.HasKey("AppointmentsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AppointmentPatient");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.WorkSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VanityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("VanityId")
                        .IsUnique();

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("DepartmentDoctor", b =>
                {
                    b.Property<long>("DepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorsId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("DepartmentDoctor");
                });

            modelBuilder.Entity("DepartmentNurse", b =>
                {
                    b.Property<long>("DepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("NursesId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentsId", "NursesId");

                    b.HasIndex("NursesId");

                    b.ToTable("DepartmentNurse");
                });

            modelBuilder.Entity("DoctorWorkSchedule", b =>
                {
                    b.Property<long>("DoctorsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSchedulesId")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorsId", "WorkSchedulesId");

                    b.HasIndex("WorkSchedulesId");

                    b.ToTable("DoctorWorkSchedule");
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<long>("LanguagesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PeopleId")
                        .HasColumnType("bigint");

                    b.HasKey("LanguagesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LanguagePerson");
                });

            modelBuilder.Entity("NurseWorkSchedule", b =>
                {
                    b.Property<long>("NursesId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSchedulesId")
                        .HasColumnType("bigint");

                    b.HasKey("NursesId", "WorkSchedulesId");

                    b.HasIndex("WorkSchedulesId");

                    b.ToTable("NurseWorkSchedule");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Doctor", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Person");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Nurse", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Person");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Patient", b =>
                {
                    b.HasBaseType("ClinicManagement.ApplicationCore.Entities.Person");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("AppointmentPatient", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.DateTimeRange", "DateTimeSchedule", b1 =>
                        {
                            b1.Property<long>("AppointmentId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("DateTimeSchedule")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Clinic", "Clinic")
                        .WithMany("Branches")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<long>("BranchId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Department", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Branch", "Branch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Person", b =>
                {
                    b.OwnsOne("MedicApp.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("MedicApp.SharedKernel.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.WorkSchedule", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MedicApp.SharedKernel.DateTimeRange", "DateTimeSchedule", b1 =>
                        {
                            b1.Property<long>("WorkScheduleId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkScheduleId");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleId");
                        });

                    b.Navigation("DateTimeSchedule")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DepartmentDoctor", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentNurse", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Nurse", null)
                        .WithMany()
                        .HasForeignKey("NursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWorkSchedule", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.WorkSchedule", null)
                        .WithMany()
                        .HasForeignKey("WorkSchedulesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NurseWorkSchedule", b =>
                {
                    b.HasOne("ClinicManagement.ApplicationCore.Entities.Nurse", null)
                        .WithMany()
                        .HasForeignKey("NursesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ClinicManagement.ApplicationCore.Entities.WorkSchedule", null)
                        .WithMany()
                        .HasForeignKey("WorkSchedulesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Branch", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("ClinicManagement.ApplicationCore.Entities.Clinic", b =>
                {
                    b.Navigation("Branches");
                });
#pragma warning restore 612, 618
        }
    }
}
