@page "/department/create"
@page "/department/edit/{DepartmentId:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IClinicManagementApiService ApiService
@inject ILogger<CreateEdit> Logger

<PageTitle>Clinic Management - @pageTitle</PageTitle>

<h3>@pageTitle</h3>

<EditForm Model="@departmentEditModel" OnValidSubmit="@HandleValidDepartmentSubmitAsync">
    <div class="row">
        <div class="col-md-5 col-lg-4 order-md-last">
            <ValidationSummary />
        </div>
        <div class="col-md-7 col-lg-8">
            <DataAnnotationsValidator />
            <div class="row">
                <label class="form-label">
                    Name
                    <InputText id="name" class="form-control" @bind-Value="departmentEditModel.Name" />
                </label>
            </div>
            <div class="row">
                <label class="form-label">
                    Phone
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">+</span>
                        <div class="col-sm-3">
                            <InputText id="name" class="form-control" @bind-Value="departmentEditModel.PhoneNumber.CountryCode" />
                        </div>
                        <InputText id="name" class="form-control" @bind-Value="departmentEditModel.PhoneNumber.Number" />
                    </div>
                </label>
            </div>

            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </div>
</EditForm>

<ModalComponent @ref="modalComponent" PrimaryButtonText="Ok" />

@code {
    private string pageTitle = "New Department";
    private DepartmentEditModel departmentEditModel = new();
    private ModalComponent? modalComponent;

    [Parameter]
    public Guid? DepartmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (DepartmentId.HasValue)
        {
            pageTitle = "Edit Department";
            departmentEditModel = await ApiService.GetDepartmentByIdAsync<DepartmentEditModel>(DepartmentId.Value);
        }
    }

    private async Task HandleValidDepartmentSubmitAsync()
    {
        try
        {
            bool result = DepartmentId.HasValue
                          ? await ApiService.UpdateDepartmentAsync(departmentEditModel)
                          : await ApiService.InsertDepartmentAsync(departmentEditModel);

            if (result)
            {
                departmentEditModel = new();
                modalComponent?.Show("Department", "Department saved successfully!", ModalType.OneButtonWithRedirectToUrl, redirectUrl: "/departments");
            }
            else
            {
                modalComponent?.Show("Error", "An error occurred when saving the department!", ModalType.OneButtonWithoutAction);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when saving department: {Message}", ex.Message);
        }
    }
}