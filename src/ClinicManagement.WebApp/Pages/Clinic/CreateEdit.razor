@page "/clinic/create"
@page "/clinic/edit/{ClinicId:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IClinicManagementApiService ApiService
@inject ILogger<CreateEdit> Logger

<PageTitle>Clinic Management - @pageTitle</PageTitle>

<h1>@pageTitle</h1>

<EditForm Model="@clinicEditModel" OnValidSubmit="@HandleValidSubmitAsync">
    <div class="row">
        <div class="col-md-5 col-lg-4 order-md-last">
            <ValidationSummary />
        </div>
        <div class="col-md-7 col-lg-8">
            <DataAnnotationsValidator />
            <div class="row">
                <label class="form-label">
                    Name
                    <InputText id="name" class="form-control" @bind-Value="clinicEditModel.Name" />
                </label>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

<ModalComponent @ref="modalComponent" PrimaryButtonText="Ok" />

@code {
    private string pageTitle = "New Clinic";
    private ClinicEditModel clinicEditModel = new();
    private ModalComponent? modalComponent;

    [Parameter]
    public Guid? ClinicId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClinicId.HasValue)
        {
            pageTitle = "Edit Clinic";
            clinicEditModel = await ApiService.GetClinicByIdAsync<ClinicEditModel>(ClinicId.Value);
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        try
        {
            bool result = ClinicId.HasValue
                          ? await ApiService.UpdateClinicAsync(clinicEditModel)
                          : await ApiService.InsertClinicAsync(clinicEditModel);

            if (result)
            {
                clinicEditModel = new();
                modalComponent?.Show("Clinic", "Clinic saved successfully!", ModalType.OneButtonWithRedirectToUrl, redirectUrl: "/clinic");
            }
            else
            {
                modalComponent?.Show("Error", "An error occurred when saving the clinic!", ModalType.OneButtonWithoutAction);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when saving clinic: {Message}", ex.Message);
        }
    }
}