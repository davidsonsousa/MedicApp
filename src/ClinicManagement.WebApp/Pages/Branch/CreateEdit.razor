@page "/branch/create"
@page "/branch/edit/{BranchId:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IClinicManagementApiService ApiService
@inject ILogger<CreateEdit> Logger

<PageTitle>Clinic Management - @pageTitle</PageTitle>

<h3>@pageTitle</h3>

<EditForm Model="@branchEditModel" OnValidSubmit="@HandleValidBranchSubmitAsync">
    <div class="row">
        <div class="col-md-5 col-lg-4 order-md-last">
            <ValidationSummary />
        </div>
        <div class="col-md-7 col-lg-8">
            <DataAnnotationsValidator />
            <div class="row">
                <label class="form-label">
                    Name
                    <InputText id="name" class="form-control" @bind-Value="branchEditModel.Name" />
                </label>
            </div>
            <div class="row">
                <label class="form-label">
                    Phone
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">+</span>
                        <div class="col-sm-3">
                            <InputText id="name" class="form-control" @bind-Value="branchEditModel.PhoneNumber.CountryCode" />
                        </div>
                        <InputText id="name" class="form-control" @bind-Value="branchEditModel.PhoneNumber.Number" />
                    </div>
                </label>
            </div>
            <div class="row">
                <label class="form-label">Street <InputText id="name" class="form-control" @bind-Value="branchEditModel.Address.Street" /></label>
            </div>
            <div class="row">
                <label class="form-label">Zip code <InputText id="name" class="form-control" @bind-Value="branchEditModel.Address.ZipCode" /></label>
            </div>
            <div class="row">
                <label class="form-label">City <InputText id="name" class="form-control" @bind-Value="branchEditModel.Address.City" /></label>
            </div>
            @if (branchEditModel.Address.HasState)
            {
                <div class="row">
                    <label class="form-label">State <InputText id="name" class="form-control" @bind-Value="branchEditModel.Address.State" /></label>
                </div>
            }
            <div class="row">
                <label class="form-label">Country <InputText id="name" class="form-control" @bind-Value="branchEditModel.Address.Country" /></label>
            </div>

            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </div>
</EditForm>

<div class="row">
    @if (BranchId.HasValue)
    {
        <hr class="my-4" />
        <h3>
            <span>Departments</span>
            <button type="button" class="btn btn-primary" disabled="@isEditOpen" @onclick="AddDepartment"><i class="fa-solid fa-plus"></i></button>
        </h3>
    }

    @foreach (var department in branchEditModel.Departments)
    {
        if (departmentId == department.VanityId)
        {
            <div class="col-3">
                <div class="card">
                    <EditForm Model="@departmentEditModel" OnValidSubmit="@HandleValidDepartmentSubmitAsync">
                        <DataAnnotationsValidator />
                        <div class="card-header">
                            <InputText id="name" class="form-control" @bind-Value="departmentEditModel.Name" />
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li>
                                    Phone
                                    <div class="input-group mb-3">
                                        <span class="input-group-text" id="basic-addon1">+</span>
                                        <div class="col-sm-3">
                                            <InputText id="name" class="form-control" @bind-Value="departmentEditModel.PhoneNumber.CountryCode" />
                                        </div>
                                        <InputText id="name" class="form-control" @bind-Value="departmentEditModel.PhoneNumber.Number" />
                                    </div>
                                </li>
                            </ul>
                            <button type="submit" class="w-50 btn btn-success">Save</button>
                            <button type="button" class="btn btn-danger" @onclick="CloseEditForm">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div class="col-3">
                <div class="card">
                    <h5 class="card-header"><a href="/department/edit/@department.VanityId">@department.Name</a></h5>
                    <div class="card-body">
                        <ul class="list-unstyled">
                            <li>Phone: +@department.PhoneNumber.CountryCode @department.PhoneNumber.Number</li>
                        </ul>
                        <button type="button" class="w-100 btn btn-primary" disabled="@isEditOpen" @onclick="() => EditDepartment(department.VanityId)">Edit</button>
                    </div>
                </div>
            </div>
        }
    }
</div>


<ModalComponent @ref="modalComponent" PrimaryButtonText="Ok" />

@code {
    private string pageTitle = "New Branch";
    private BranchEditModel branchEditModel = new();
    private DepartmentEditModel departmentEditModel = new();
    private ModalComponent? modalComponent;
    private Guid? departmentId;
    private bool isEditOpen;

    [Parameter]
    public Guid? BranchId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (BranchId.HasValue)
        {
            pageTitle = "Edit Branch";
            branchEditModel = await ApiService.GetBranchByIdAsync<BranchEditModel>(BranchId.Value);
        }
    }

    private async Task HandleValidBranchSubmitAsync()
    {
        try
        {
            bool result = BranchId.HasValue
                          ? await ApiService.UpdateBranchAsync(branchEditModel)
                          : await ApiService.InsertBranchAsync(branchEditModel);

            if (result)
            {
                branchEditModel = new();
                modalComponent?.Show("Branch", "Branch saved successfully!", ModalType.OneButtonWithRedirectToUrl, redirectUrl: "/branches");
            }
            else
            {
                modalComponent?.Show("Error", "An error occurred when saving the branch!", ModalType.OneButtonWithoutAction);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when saving branch: {Message}", ex.Message);
        }
    }

    private async Task HandleValidDepartmentSubmitAsync()
    {
        try
        {
            if (departmentEditModel.BranchId == Guid.Empty)
            {
                departmentEditModel.BranchId = BranchId.Value;
            }

            var result = departmentId.HasValue
                         ? await ApiService.UpdateDepartmentAsync(departmentEditModel)
                         : await ApiService.InsertDepartmentAsync(departmentEditModel);

            if (result)
            {
                branchEditModel.Departments = await ApiService.GetDepartmentsByBranchIdAsync<DepartmentEditModel>(BranchId.Value);
                CloseEditForm();
            }
            else
            {
                modalComponent?.Show("Error", $"An error occurred when saving the department '{departmentEditModel.Name}'!", ModalType.OneButtonWithoutAction);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when saving department: {Message}", ex.Message);
        }
    }

    private void AddDepartment()
    {
        departmentEditModel.BranchId = branchEditModel.VanityId;
        ((List<DepartmentEditModel>)branchEditModel.Departments).Add(departmentEditModel);
        departmentId = Guid.Empty;
        isEditOpen = true;
    }

    private async Task EditDepartment(Guid? vanityId)
    {
        if (vanityId.HasValue)
        {
            departmentEditModel = await ApiService.GetDepartmentByIdAsync<DepartmentEditModel>(vanityId.Value);
            departmentId = vanityId;
            isEditOpen = true;
        }
    }

    private void CloseEditForm()
    {
        if (departmentEditModel.VanityId == Guid.Empty)
        {
            ((List<DepartmentEditModel>)branchEditModel.Departments).Remove(departmentEditModel);
        }

        departmentEditModel = new();
        departmentId = null;
        isEditOpen = false;
    }
}