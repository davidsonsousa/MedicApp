@page "/branches"
@inject HttpClient Http
@inject IClinicManagementApiService ApiService
@inject ILogger<Index> Logger

<PageTitle>Branch Management - Branches</PageTitle>

<h1>Branches</h1>
<div class="btn-group" role="group">
    <a href="branches/create" role="button" class="btn btn-success" title="New"><i class="fa-solid fa-plus"></i> New</a>
</div>

@if (branches == null)
{
    <p><em>No branches found</em></p>
}
else
{
    <table class="table table-hover">
        <thead class="table-light">
            <tr>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var branch in branches)
            {
                <tr>
                    <td>@branch.Name</td>
                    <td>
                        <a href="/branches/edit/@branch.VanityId" role="button" class="btn btn-secondary" title="Edit"><i class="fa-solid fa-pen"></i></a>
                        <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteModal(branch)">
                            <i class="fa-solid fa-trash-can"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot class="table-light">
            <tr>
                <th>Name</th>
                <th></th>
            </tr>
        </tfoot>
    </table>
}

<ModalComponent @ref="modalComponent" PrimaryButtonText="Yes" SecondaryButtonText="No" EventCallback="HandleEventCallbackAsync" />

@code {
    private IEnumerable<BranchViewModel>? branches;
    private ModalComponent? modalComponent;

    protected override async Task OnInitializedAsync()
    {
        await GetBranchesAsync();
    }

    private void ShowDeleteModal(BranchViewModel branch)
    {
        modalComponent?.Show("Delete branch?", $"Are you sure you want to delete '{branch.Name}'?", ModalType.TwoButtons, branch.VanityId);
    }

    private async Task GetBranchesAsync()
    {
        try
        {
            branches = await ApiService.GetBranchesAsync<BranchViewModel>();
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when loading branches: {Message}", ex.Message);
        }
        StateHasChanged();
    }

    private async Task HandleEventCallbackAsync(Guid id)
    {
        try
        {
            var result = await ApiService.DeleteBranchAsync(id);

            if (result)
            {
                await GetBranchesAsync();
                modalComponent?.Show("Confirmation", "The branch was successfully deleted.", ModalType.OneButtonWithoutAction);
            }
            else
            {
                modalComponent?.Show("Error", "An error occurred when deleting the branch.", ModalType.OneButtonWithoutAction);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error when saving branch: {Message}", ex.Message);
        }
    }
}
